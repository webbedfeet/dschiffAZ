---
title: "Use of For Loops"
author: "Daniel Schiff"
date: "3/9/2022"
output:
  word_document: default
  html_document: default
---

```{r setup, include=FALSE, warning=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## The Importance of For Loops

In almost everything we do, we see repetition become a stable part of routine and production. For example, Henry Ford was able to find reproducibility in the assembly line. Manufacturing car after car the same way to improve cost, and efficiency. Like Ford's method, modern computers can reproduce in high speeds the same data over again with minor tweaks based on the information it is feed. 

In R we have a group of loops (while, repeat and for), while loops which will do something while a statement or group of statements are true. We have repeat loops, which is a simple loop that will continue a command until it is told to not continue. If it is never told not to continue it will run an infinite amount of times. Lastly we will focus on the for loop. A for loops is used primarily to run items of a sequence. 

Below is an example of how to use a for loop for probability calculating without replacement. The case is, if we had 100 skittles and three would 100% kill you while the other 97 are 100% safe, based on how many you eat what is the probability you will continue to live. For example the first one you eat you have a 97 out of 100 chance of living (97%). Without replacement the odds of living will go down, as you eat more skittles. By the time you eat the 31st skittle the probability of living is 25%.  

```{r, warning=FALSE, message=FALSE}
require(tidyverse)
#Set p to NA 
p <-  NA
#Set a numerator
n <- 0
#Set Denominator
d <- 3
#Set an empty data frame
output <- NA

e <- 1
#expected life value, if you eat no skittles 100% chance of living or 1

#Write a for loop to produce probability that they will not kill you
for (i in 98:1) {
  #make the values into a vector
  out <- data.frame(i, n, d, p, e)
  #Add one to the numerator 
  n <- n + 1
  #Add one to the denominator
  d <- d + 1
  #combine the vector into the data frame
  output <- rbind(output, out) %>%
    mutate(p = n/d, e = e * p) %>% 
    drop_na(p) #drop if there are a null vector
  
}

#Include a Graphic

g <- ggplot(output, aes(x = i, y = e)) + geom_point(shape = 1, color = "red") + 
  ylab("Life Expectancy") + xlab("Number of Skittles Consumed") +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() + labs(title = "Skittle Probability Rate")

g

```

## Lets Look More Into For Loops 

The nice things about for loops, is it helps other ways than probability, potentially it can be used to print several graphics. The example below is a distribution example using a random normality curve. Using a for loop to create plots as the sequence increases the volume. Create a random distribution with the rnorm function, and as we increase the sample size we see that there is a normality. We can see in the graphics below that as the sample size increases the normality of the graphics becomes more normal. Using for loops as such allows us to become more efficent as programmers and ease the work load.  


```{r, warning=FALSE, message=FALSE}

for (m in seq(25, 500, 25)) {

  set.seed(435)
  
  x <- rnorm(n = m, mean = 0, sd = 1)
  x <- data.frame(x)
  
  p <- ggplot(x, aes(x)) + geom_histogram(bins = 8) + labs(title = paste0("BoxPlot for ", m))
  
  print(p)
  
}

```


